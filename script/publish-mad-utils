#!/usr/bin/env bash

# TODO allow more than 2 dependent projects

g_curbr() {
    git status | head -1 | awk '{print $3}'
}
gpocur() {
    echo "$(g_curbr)" | xargs git push origin
}

#==== SCRIPT ===========================================================
#        NAME:  publish-mad-utils
#
# DESCRIPTION:  Publish mad-utils to npm (git commit & push to master) &
#               optionally reinstall in 2 dependent projects
#
#     EXAMPLE:  publish-mad-utils 1.10.2
#     EXAMPLE:  publish-mad-utils 0.52.6 --local-reinstalls
#
#   @PARAM $1:  NEW_VERISON_NUMBER Version number to upgrade to. Must be
#                                  semver e.g. 0.41.22
#
#    @FLAG $2:  --local-reinstalls If set, try to reinstall mad-utils in 2
#                                  dependent projects. Must set paths
#                                  DEPENDENT_PROJ_DIR_1 & DEPENDENT_PROJ_DIR_2
#                                  in script/.env for this to work.
#
#
#=======================================================================

############################################# HELPERS ##############################################
function local_reinstalls_usage {
    echo "Neither DEPENDENT_PROJ_DIR_1 or DEPENDENT_PROJ_DIR_2 are set in .env,"
    echo "but the script was the passed --local-reinstalls flag."
    echo ""
    echo "Please either add run publish-mad-utils without the --local-reinstalls flag, or"
    echo "add DEPENDENT_PROJ_DIR_1 and/or DEPENDENT_PROJ_DIR_2 vars to ./script/.env file,"
    echo "with the value set to the path to the root dir of the respective dependent project."
    echo ""
    echo "e.g.:"
    echo "DEPENDENT_PROJ_DIR_1=~/projects/work-projects/Javelin"
    echo "DEPENDENT_PROJ_DIR_2=~/projects/work-projects/web-client-v2"
    echo ""
    echo "You may also optionally add DEP_1_BUILD_CMD and/or DEP_2_BUILD_CMD to .env, providing"
    echo "a build command to run when mad-utils has been upgraded in the respective project"
    echo ""
    echo "e.g.:"
    echo "DEP_1_BUILD_CMD=\"npm run clean\""
    exit
}

######################################## ARGUMENT HANDLING #########################################
# Ensure 1st argument given
if [ ! -n "$1" ]; then
    echo "Must call with new version number as first arg. e.g.:"
    echo "  publish.sh 0.52.5"
    exit
fi

NEW_VERSION_NUMBER=$1

# Ensure 1st argument is semver number
if (echo "$NEW_VERSION_NUMBER" | grep -Eq *[a-zA-Z].*) || (echo "$NEW_VERSION_NUMBER" | grep -v -Eq ^[0-9]+\.[0-9]+\.[0-9]+\(\.[0-9]+\)?$); then
    echo "New version number must be in semver format e.g.:"
    echo "0.10.3"
    exit
fi

# Get values from .env config (dependent projects' locations)
. ./script/.env

# Check whether script should install in dependent projects' locations
if [ "$2" = "--local-reinstalls" ]; then
    if [ ! -n "$DEPENDENT_PROJ_DIR_1" ] && [ ! -n "$DEPENDENT_PROJ_DIR_2" ]; then
        local_reinstalls_usage
        exit
    fi
    echo "Will reinstall in dependent projects' dirs (--local-reinstalls set)"
else
    echo "Skipping installation in dependent projects' dirs (--local-reinstalls not set)"
fi

####################################### CONVENIENCE ALIASES ########################################
# Git aliases for convenience
alias g_curbr="git status | head -1 | awk '{print \$3}'"
alias gpocur='echo "$(g_curbr)" | xargs git push origin'

############################################ RUN SCRIPT ############################################
# Push current branch
gpocur

# Replace the version number in package.json
replace-in-file /\"version\":\ *\"[0-9]+\.[0-9]+\.[0-9]+\.?[0-9]?[0-9]?[0-9]?[0-9]?/g "\"version\": \"$NEW_VERSION_NUMBER\"" package.json --isRegex
replace-in-file /mad\-utils\.git#v[0-9]+\.[0-9]+\.[0-9]+\.?[0-9]?[0-9]?[0-9]?[0-9]?\"/g "mad-utils.git#v$NEW_VERSION_NUMBER\"" package.json --isRegex

# git: Add, commit, and push package.json change to repo, then publish new version
git add package.json
git commit -m "Bump to version $NEW_VERSION_NUMBER"
gpocur
git tag v$1
git push origin v$1
npm publish
echo "Published v$1 of mad-utils!"

###################################### UPGRADE IN OTHER REPOS ######################################
# Exit if --local-reinstalls not set
# Script won't try to reinstall mad-utils in other repos in this case
if [ "$2" != "--local-reinstalls" ]; then
    echo "Done! (skipped install in dependent projects' dirs, since --local-reinstalls not set)"
    exit
fi

# Install in dependent project 1 dir, if available
if [ -n "$DEPENDENT_PROJ_DIR_1" ]; then
    pushd $DEPENDENT_PROJ_DIR_1
    # yarn remove mad-utils
    # yarn add mad-utils
    # git add package.json yarn.lock
    npm uninstall mad-utils
    npm install mad-utils
    git add package.json package-lock.json
    git commit -m "Upgraded mad-utils to v$NEW_VERSION_NUMBER"
    gpocur
    popd

    # Start/restart dependent project 1 build, if build cmd set in env vars
    if [ ! -z "$DEP_1_BUILD_CMD" ]; then
        $DEP_1_BUILD_CMD
    fi
fi

# Install in dependent project 2 dir, if available
if [ -n "$DEPENDENT_PROJ_DIR_2" ]; then
    pushd $DEPENDENT_PROJ_DIR_2
    # yarn remove mad-utils
    # yarn add mad-utils
    # git add package.json yarn.lock
    npm uninstall mad-utils
    npm install mad-utils
    git add package.json package-lock.json
    git commit -m "Upgraded mad-utils to v$NEW_VERSION_NUMBER"
    gpocur

    # Start/restart dependent project 2 build, if build cmd set in env vars
    if [ ! -z "$DEP_2_BUILD_CMD" ]; then
        $DEP_2_BUILD_CMD
    fi
fi

# Return to mad-utils
popd

echo "publish complete! Bumped to version $NEW_VERSION_NUMBER, published to npm, installed in dependent projects"
