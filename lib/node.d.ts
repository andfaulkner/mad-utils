import { array, date, decorator, Enum, error, json, number, object, query, search, string, types as isoTypes } from './shared';
export { array, date, decorator, Enum, error, json, number, object, query, search, string };
import { isNode } from 'detect-node';
export { isNode };
import * as middleware from './src/node/middleware';
export * from './src/node/middleware';
export { middleware };
export { middleware as middlewares };
export { middleware as mware };
export { middleware as MW };
import * as test from './src/node/test';
export * from './src/node/test';
export { test };
import * as file from './src/node/file';
export * from './src/node/file';
export { file };
import * as nodeTypes from './src/node/types-node';
export declare const types: typeof isoTypes & typeof nodeTypes;
/********************************************* EXPORT *********************************************/
/**
 * @export mUtils - module
 */
export declare const mUtils: {
    array: typeof array;
    date: typeof date;
    decorator: typeof decorator;
    decorators: typeof decorator;
    enum: typeof Enum;
    Enum: typeof Enum;
    error: typeof error;
    file: typeof file;
    isNode: any;
    json: typeof json;
    middleware: typeof middleware;
    number: typeof number;
    object: typeof object;
    query: typeof query;
    search: typeof search;
    str: typeof string;
    string: typeof string;
    test: typeof test;
    type: typeof isoTypes & typeof nodeTypes;
    types: typeof isoTypes & typeof nodeTypes;
    typing: typeof isoTypes & typeof nodeTypes;
};
export declare const __: {
    array: typeof array;
    date: typeof date;
    decorator: typeof decorator;
    decorators: typeof decorator;
    enum: typeof Enum;
    Enum: typeof Enum;
    error: typeof error;
    file: typeof file;
    isNode: any;
    json: typeof json;
    middleware: typeof middleware;
    number: typeof number;
    object: typeof object;
    query: typeof query;
    search: typeof search;
    str: typeof string;
    string: typeof string;
    test: typeof test;
    type: typeof isoTypes & typeof nodeTypes;
    types: typeof isoTypes & typeof nodeTypes;
    typing: typeof isoTypes & typeof nodeTypes;
};
export declare const m_: {
    array: typeof array;
    date: typeof date;
    decorator: typeof decorator;
    decorators: typeof decorator;
    enum: typeof Enum;
    Enum: typeof Enum;
    error: typeof error;
    file: typeof file;
    isNode: any;
    json: typeof json;
    middleware: typeof middleware;
    number: typeof number;
    object: typeof object;
    query: typeof query;
    search: typeof search;
    str: typeof string;
    string: typeof string;
    test: typeof test;
    type: typeof isoTypes & typeof nodeTypes;
    types: typeof isoTypes & typeof nodeTypes;
    typing: typeof isoTypes & typeof nodeTypes;
};
export declare const madUtils: {
    array: typeof array;
    date: typeof date;
    decorator: typeof decorator;
    decorators: typeof decorator;
    enum: typeof Enum;
    Enum: typeof Enum;
    error: typeof error;
    file: typeof file;
    isNode: any;
    json: typeof json;
    middleware: typeof middleware;
    number: typeof number;
    object: typeof object;
    query: typeof query;
    search: typeof search;
    str: typeof string;
    string: typeof string;
    test: typeof test;
    type: typeof isoTypes & typeof nodeTypes;
    types: typeof isoTypes & typeof nodeTypes;
    typing: typeof isoTypes & typeof nodeTypes;
};
